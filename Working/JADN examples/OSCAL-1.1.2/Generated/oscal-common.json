{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://csrc.nist.gov/ns/oscal/1.1.2/oscal-common",
  "type": "object",
  "additionalProperties": false,
  "properties": {},
  "definitions": {
    "Base64Datatype": {
      "title": "Base64Datatype",
      "type": "string",
      "description": "Binary data encoded using the Base 64 encoding algorithm as defined by RFC4648.",
      "maxLength": 1000,
      "pattern": "^[0-9A-Za-z+/]+={0,2}$"
    },
    "BooleanDatatype": {
      "title": "BooleanDatatype",
      "type": "boolean",
      "description": "A binary value that is either: true or false."
    },
    "DateDatatype": {
      "title": "DateDatatype",
      "type": "string",
      "description": "A string representing a 24-hour period with an optional timezone.",
      "maxLength": 1000,
      "pattern": "^(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))?$"
    },
    "DateTimeWithTimezoneDatatype": {
      "title": "DateTimeWithTimezoneDatatype",
      "type": "string",
      "description": "A string representing a point in time with a required timezone.",
      "format": "date-time",
      "maxLength": 1000,
      "pattern": "^(((2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26])))-02-29)|(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))|(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))|(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30)))T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|(-((0[0-9]|1[0-2]):00|0[39]:30)|\\+((0[0-9]|1[0-4]):00|(0[34569]|10):30|(0[58]|12):45)))$"
    },
    "EmailAddressDatatype": {
      "title": "EmailAddressDatatype",
      "allOf": [
        {
          "$ref": "#/definitions/StringDatatype"
        },
        {
          "type": "string",
          "description": "An email address string formatted according to RFC 6531."
        }
      ]
    },
    "StringDatatype": {
      "title": "StringDatatype",
      "type": "string",
      "description": "A non-empty string with leading and trailing whitespace disallowed. Whitespace is: U+9, U+10, U+32 or [ \n\t]+",
      "maxLength": 1000,
      "pattern": "^\\S(.*\\S)?$"
    },
    "Json-schema-directive": {
      "title": "Json schema directive",
      "allOf": [
        {
          "$ref": "#/definitions/URIReferenceDatatype"
        }
      ]
    },
    "URIReferenceDatatype": {
      "title": "URIReferenceDatatype",
      "type": "string",
      "description": "A URI Reference, either a URI or a relative-reference, formatted according to section 4.1 of RFC3986.",
      "format": "uri-reference",
      "maxLength": 1000
    },
    "NonNegativeIntegerDatatype": {
      "title": "NonNegativeIntegerDatatype",
      "allOf": [
        {
          "$ref": "#/definitions/IntegerDatatype"
        },
        {
          "type": "number",
          "description": "An integer value that is equal to or greater than 0."
        }
      ]
    },
    "IntegerDatatype": {
      "title": "IntegerDatatype",
      "type": "integer",
      "description": "A whole number value."
    },
    "PositiveIntegerDatatype": {
      "title": "PositiveIntegerDatatype",
      "allOf": [
        {
          "$ref": "#/definitions/IntegerDatatype"
        },
        {
          "type": "number",
          "description": "An integer value that is greater than 0."
        }
      ]
    },
    "TokenDatatype": {
      "title": "TokenDatatype",
      "type": "string",
      "description": "A non-colonized name as defined by XML Schema Part 2: Datatypes Second Edition. https://www.w3.org/TR/xmlschema11-2/#NCName.",
      "maxLength": 1000,
      "pattern": "^(\\p{L}|_)(\\p{L}|\\p{N}|[.\\-_])*$"
    },
    "URIDatatype": {
      "title": "URIDatatype",
      "type": "string",
      "description": "A universal resource identifier (URI) formatted according to RFC3986.",
      "format": "uri",
      "maxLength": 1000,
      "pattern": "^[a-zA-Z][a-zA-Z0-9+\\-.]+:.+$"
    },
    "UUIDDatatype": {
      "title": "UUIDDatatype",
      "type": "string",
      "description": "A type 4 ('random' or 'pseudorandom') or type 5 UUID per RFC 4122.",
      "maxLength": 1000,
      "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[45][0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$"
    }
  }
}